<%- include("../../views/partials/admin/header") %>
<head>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
<style>
/* General Card Styling */
.card {
    border-radius: 12px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
    padding: 25px;
    background: #ffffff;
    transition: 0.3s;
}

.card:hover {
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);
}

/* Form Elements */
.form-control, .form-select {
    border-radius: 8px;
    padding: 12px;
    border: 1px solid #c7c2e3;
    transition: all 0.3s ease;
    background: #f8f9ff;
    font-size: 16px;
}

.form-control:focus, .form-select:focus {
    border-color: #6f42c1;
    box-shadow: 0 0 6px rgba(111, 66, 193, 0.5);
}

/* Labels */
.form-label {
    font-weight: 600;
    color: #6f42c1;
    margin-bottom: 6px;
    display: block;
}

/* Buttons */
.btn-primary {
    background-color: #6f42c1;
    color: white;
    border: none;
    padding: 12px 18px;
    border-radius: 8px;
    font-size: 16px;
    cursor: pointer;
    transition: background 0.3s;
    display: inline-block;
    width: 100%;
}

.btn-primary:hover {
    background-color: #563d7c;
}

/* Error Messages */
.error-message {
    color: red;
    font-size: 14px;
    margin-top: 5px;
}

/* Image Upload Section */
.image-upload-section {
    margin-top: 20px;
    padding: 15px;
    border: 2px dashed #6f42c1;
    border-radius: 12px;
    background: #f9f9ff;
    text-align: center;
}

.image-preview-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 12px;
    margin-top: 15px;
}

.thumbnail {
    width: 110px;
    height: 110px;
    object-fit: cover;
    border-radius: 8px;
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2);
    border: 2px solid #6f42c1;
}

.upload-label {
    display: block;
    background-color: #6f42c1;
    color: white;
    padding: 10px;
    margin-top: 10px;
    border-radius: 8px;
    cursor: pointer;
    font-size: 16px;
    width: 100%;
    text-align: center;
}

.file-input {
    display: none;
}

/* Responsive Design */
@media (max-width: 768px) {
    .form-control {
        font-size: 14px;
        padding: 10px;
    }

    button {
        width: 100%;
        padding: 12px;
    }
}

   /* Size Buttons Styling */
   .size-buttons-container {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .size-btn {
        border: 2px solid #6f42c1;
        background: white;
        color: #6f42c1;
        padding: 8px 15px;
        font-size: 16px;
        border-radius: 8px;
        cursor: pointer;
        transition: 0.3s;
    }

    .size-btn.selected {
        background: #6f42c1;
        color: white;
    }

</style>
</head>
    
 
    <section class="content-main">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="content-header text-center">
                    <h2 class="content-title">üõç Add New Product</h2>
                </div>
    
                <div class="card">
                    <div class="card-body">
                        <form method="post" action="/admin/addProducts" enctype="multipart/form-data" onsubmit="return validateForm()">
                            
                            <!-- Product Name -->
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Enter product name" name="productName" class="form-control" id="product_name">
                                <div id="productName-error" class="error-message"></div>
                            </div>
    
                            <!-- Brand -->
                            <div class="mb-4">
                                <label class="form-label">Brand</label>
                                <select class="form-select" name="brand" id="brand" required>
                                    <option value="" disabled selected>Select a Brand</option>
                                    <% for(let i=0; i<brand.length; i++) { %>
                                        <option value="<%= brand[i].brandName %>"><%= brand[i].brandName %></option>
                                    <% } %>
                                </select>
                                <div id="brand-error" class="error-message"></div>
                            </div>
    
                            <!-- Description -->
                            <div class="mb-4">
                                <label class="form-label">Full Description</label>
                                <textarea placeholder="Enter product details" id="descriptionid" name="description" class="form-control" rows="4"></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>
    
                            <!-- Pricing and Quantity -->
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular Price (‚Çπ)</label>
                                        <input type="number" name="regularPrice" class="form-control">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
    
                            <!-- Color -->
                            <div class="mb-4">
                                <label class="form-label">Color</label>
                                <input type="text" name="color" class="form-control">
                                <div id="color-error" class="error-message"></div>
                            </div>
    
                            <!-- Category -->
                            <div class="mb-4">
                                <label class="form-label">Category</label>
                                <select class="form-select" name="category" required>
                                    <option value="" disabled selected>Select a Category</option>
                                    <% for(let i=0; i<cat.length; i++) { %>
                                        <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                                    <% } %>
                                </select>
                                <div id="category-error" class="error-message"></div>
                            </div>
    
                           
                           <!-- Size Selection -->
<div class="mb-4">
    <label class="form-label">Size</label>
    <div class="size-buttons-container">
        <button type="button" class="size-btn" data-size="S">S</button>
        <button type="button" class="size-btn" data-size="M">M</button>
        <button type="button" class="size-btn" data-size="L">L</button>
        <button type="button" class="size-btn" data-size="XL">XL</button>
        <button type="button" class="size-btn" data-size="XXL">XXL</button>
    </div>
    <div id="sizeQuantities"></div> <!-- This div will contain the quantity inputs -->
    <input type="hidden" name="sizesWithQuantities" id="sizesWithQuantities">
    <div id="size-error" class="error-message"></div>
</div>

    
                            <!-- Image Upload Section -->
                            <div class="image-upload-section">
                                <h3 class="section-title">Product Images</h3>
                                <div id="image-error" class="error-message"></div>
                                <div class="image-preview-container" id="imagePreviewContainer"></div>
                                <input type="file" id="productImage" name="productImage" class="file-input" accept="image/*" multiple required>
                                <label for="productImage" class="upload-label">Add Images</label>
                                <div id="croppedImageSection" style="display: none;">
                                    <button type="button" id="saveCropBtn" class="crop-btn">Save Crop</button>
                                </div>
                            </div>
    
                            <!-- Submit Button -->
                            <div class="text-center">
                                <button class="btn-primary" type="button" onclick="validateAndSubmit()">üöÄ Publish Product</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>
    
 
<script>
function validateForm() {
    clearErrorMessages();
    const name = document.getElementsByName('productName')[0].value;
    const description = document.getElementById('descriptionid').value;
    const brand = document.getElementsByName('brand')[0].value;
    const price = document.getElementsByName('regularPrice')[0].value;
    const color = document.getElementsByName('color')[0].value;
    const category = document.getElementsByName('category')[0].value;
    const images = document.getElementById('productImage').files
    let isValid = true;

    
    // Validate Product Name
    if (name.trim() === "") {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
    } else if (!/^[a-zA-Z0-9\s.,'-]+$/.test(name.trim())) {
        displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
        isValid = false;
    }

    // Validate Description
    if (description.trim() === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    } else if (!/^[a-zA-Z0-9\s.,'-]+$/.test(description.trim())) {
        displayErrorMessage('description-error', 'Product description should contain only alphabetic characters.');
        isValid = false;
    }



    // Validate Regular Price
    if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
    }

    // Validate Color
    if (color.trim() === "") {
        displayErrorMessage('color-error', 'Please enter a color.');
        isValid = false;
    }
    // Validate Brand
if (brand.trim() === "") {
    displayErrorMessage('brand-error', 'Please select a brand.');
    isValid = false;
}
// Validate Category
if (category.trim() === "") {
    displayErrorMessage('category-error', 'Please select a category.');
    isValid = false;
}

 // Validate Size Selection & Quantities
 const selectedSizes = document.querySelectorAll(".size-btn.selected");
    if (selectedSizes.length === 0) {
        displayErrorMessage("size-error", "Please select at least one size.");
        isValid = false;
    } else {
        let allQuantitiesValid = true;
        selectedSizes.forEach(button => {
            const size = button.getAttribute("data-size");
            const quantityInput = document.getElementById(`sizeQuantity-${size}`);

            if (!quantityInput || quantityInput.value.trim() === "" || parseInt(quantityInput.value, 10) <= 0) {
                allQuantitiesValid = false;
            }
        });

        if (!allQuantitiesValid) {
            displayErrorMessage("size-error", "Each selected size must have a valid quantity (‚â•1).");
            isValid = false;
        }
    }

    // Validate Image Upload
    const totalImages = images.length + croppedFiles.length;
    if (totalImages < 3) {
        displayErrorMessage("image-error", 'Upload at least 3 images.');
        isValid = false;
    }

    return isValid;
}

function validateAndSubmit() {
    if (validateForm()) {
        Swal.fire({
            title: "Are you sure?",
            text: "Do you want to submit this product?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes, submit!"
        }).then((result) => {
            if (result.isConfirmed) {
                document.querySelector('form').submit();
            }
        });
    }
}
function displayErrorMessage(elementId, message) {
    var errorElement = document.getElementById(elementId)
    errorElement.innerText = message
    errorElement.style.display = "block"
}
function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message')
    Array.from(errorElements).forEach(element => {
        element.innerText = ''
    })
    const errorMessage = document.getElementById('errorMessage')
}
</script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.all.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
 
<script>
let selectedSizes = [];
let croppedFiles = [];
let cropper;
let originalFiles = []; // Track original files before cropping


// Handle image upload and cropping
document.getElementById('productImage').addEventListener('change', function (e) {
    const files = Array.from(e.target.files);
    originalFiles = [...originalFiles, ...files]; // Keep track of original files
    handleFileUpload(files);
});

function handleFileUpload(files) {
    const previewContainer = document.getElementById('imagePreviewContainer');
    
    files.forEach(file => {
        const reader = new FileReader();
        reader.onload = function (e) {
            const imgContainer = document.createElement('div');
            imgContainer.classList.add('image-preview-item');
            
            const img = document.createElement('img');
            img.src = e.target.result;
            img.classList.add('preview-image');
            img.style.maxWidth = '100px';
            img.style.cursor = 'pointer';
            
            // Store reference to original file
            img.dataset.fileId = file.name;
            
            img.addEventListener('click', function () {
                if (cropper) cropper.destroy();
                
                img.style.maxWidth = '100%';
                cropper = new Cropper(img, {
                    aspectRatio: 1,
                    viewMode: 1,
                });
                
                document.getElementById('croppedImageSection').style.display = 'block';
            });
            
            imgContainer.appendChild(img);
            previewContainer.appendChild(imgContainer);
        };
        reader.readAsDataURL(file);
    });
}

// Save cropped image
document.getElementById('saveCropBtn').addEventListener('click', function () {
    if (cropper) {
        cropper.getCroppedCanvas().toBlob((blob) => {
            const fileName = `cropped_${Date.now()}.png`;
            const croppedFile = new File([blob], fileName, { type: 'image/png' });
            
            // Remove original file from tracking
            const originalImg = cropper.element;
            const originalFileName = originalImg.dataset.fileId;
            originalFiles = originalFiles.filter(f => f.name !== originalFileName);
            
            // Remove original preview
            originalImg.closest('.image-preview-item').remove();
            
            // Add cropped image
            addCroppedImagePreview(croppedFile);
            
            croppedFiles.push(croppedFile);
            cropper.destroy();
            document.getElementById('croppedImageSection').style.display = 'none';
        }, 'image/png');
    }
});

function addCroppedImagePreview(file) {
    const previewContainer = document.getElementById('imagePreviewContainer');
    
    const previewItem = document.createElement('div');
    previewItem.classList.add('image-preview-item');
    
    const previewImage = document.createElement('img');
    previewImage.src = URL.createObjectURL(file);
    previewImage.style.maxWidth = '100%';
    
    const deleteBtn = document.createElement('button');
    deleteBtn.textContent = 'Delete';
    deleteBtn.classList.add('delete-btn');
    deleteBtn.addEventListener('click', function () {
        previewItem.remove();
        croppedFiles = croppedFiles.filter(f => f !== file);
    });
    
    previewItem.appendChild(previewImage);
    previewItem.appendChild(deleteBtn);
    previewContainer.appendChild(previewItem);
}
</script>

<script>
document.addEventListener("DOMContentLoaded", function () {
    const sizeButtons = document.querySelectorAll(".size-btn");
    const sizeQuantitiesContainer = document.getElementById("sizeQuantities");
    const sizesWithQuantitiesInput = document.getElementById("sizesWithQuantities");

    sizeButtons.forEach(button => {
        button.addEventListener("click", function () {
            this.classList.toggle("selected");
            handleSizeSelection(this);
        });
    });

    function handleSizeSelection(button) {
        const size = button.getAttribute("data-size");
        let existingInput = document.getElementById(`sizeQuantity-${size}`);

        if (button.classList.contains("selected")) {
            // Add input field if not existing
            if (!existingInput) {
                const inputField = document.createElement("div");
                inputField.classList.add("size-input-wrapper");
                inputField.innerHTML = `
                    <div class="mb-3">
                        <label class="form-label">Quantity for ${size}</label>
                        <input type="number" id="sizeQuantity-${size}" name="sizeQuantities[${size}]" 
                               class="form-control size-quantity" min="1" required>
                    </div>
                `;
                sizeQuantitiesContainer.appendChild(inputField);

                // Listen for input changes
                inputField.querySelector("input").addEventListener("input", updateHiddenField);
            }
        } else {
            // Remove input field when size is deselected
            if (existingInput) {
                existingInput.closest(".size-input-wrapper").remove();
            }
        }

        updateHiddenField();
    }

    function updateHiddenField() {
        const selectedSizes = {};
        document.querySelectorAll(".size-btn.selected").forEach(btn => {
            const size = btn.getAttribute("data-size");
            const quantityInput = document.getElementById(`sizeQuantity-${size}`);
            
            if (quantityInput && quantityInput.value.trim() !== "" && parseInt(quantityInput.value) > 0) {
                selectedSizes[size] = quantityInput.value;
            }
        });

        sizesWithQuantitiesInput.value = JSON.stringify(selectedSizes);
    }
});

    </script>
    
 
 

<%- include("../../views/partials/admin/footer") %>


