<%- include("../../views/partials/user/header") %>
<title>checkout</title>
<style>
    /* General Responsive Styles */
@media (max-width: 1024px) {
    .checkout-grid {
        grid-template-columns: 1fr;
    }
}

@media (max-width: 768px) {
    .checkout-container {
        padding: 0 1rem;
    }

    .checkout-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
    }

    .product-info {
        flex-direction: column;
        align-items: flex-start;
    }
    
    .product-card {
        flex-direction: column;
        align-items: flex-start;
    }
    
    .product-image {
        width: 60px;
        height: 60px;
    }
}

@media (max-width: 640px) {
    .progress-wrapper {
        padding: 0 0.5rem;
    }

    .progress-line {
        left: 30px;
        right: 30px;
    }

    .step {
        width: auto;
    }

    .step-icon {
        width: 32px;
        height: 32px;
    }

    .step-label {
        font-size: 0.75rem;
    }

    .checkout-header {
        padding: 1.5rem 1rem;
    }

    .checkout-grid {
        gap: 0.75rem;
    }

    .order-summary {
        padding: 1rem;
    }

    .coupon-input-group {
        flex-direction: column;
    }
    
    .dis-coupon {
        margin-left: 0;
        text-align: center;
    }
}

@media (max-width: 480px) {
    .checkout-progress {
        padding: 1rem 0;
    }

    .progress-wrapper {
        padding: 0 0.5rem;
    }

    .progress-line {
        top: 20px;
    }

    .step-icon {
        width: 28px;
        height: 28px;
        font-size: 0.75rem;
    }

    .step-label {
        font-size: 0.7rem;
    }

    .order-summary {
        padding: 0.75rem;
    }

    .continue-btn {
        padding: 0.75rem;
        font-size: 0.875rem;
    }
}

/* Global Styles */
:root {
    --primary: #FF3F6C;
    --primary-dark: #FF3F6C;
    --gray-50: #F9FAFB;
    --gray-100: #F3F4F6;
    --gray-200: #E5E7EB;
    --gray-300: #D1D5DB;
    --gray-600: #4B5563;
    --gray-700: #374151;
    --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
    --shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
}

/* Reset and Global Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Poppins', sans-serif;
    background-color: var(--gray-50);
    color: var(--gray-700);
    line-height: 1.5;
    margin: 0;
}

/* Modern Checkout Header */
.checkout-progress {
    background: white;
    padding: 2rem 0;
    border-bottom: 1px solid var(--gray-200);
    margin-bottom: 2rem;
}

.progress-wrapper {
    max-width: 1000px;
    margin: 0 auto;
    padding: 0 2rem;
    position: relative;
}

/* Progress Line */
.progress-line {
    position: absolute;
    top: 24px;
    left: 50px;
    right: 50px;
    height: 2px;
    background: var(--gray-200);
    z-index: 1;
}

.progress-line-fill {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    background: var(--primary);
    transition: width 0.3s ease;
    width: 50%;
}

/* Steps */
.steps {
    display: flex;
    justify-content: space-between;
    position: relative;
    z-index: 2;
}

.step {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.75rem;
    width: 120px;
}

/* Step Icons */
.step-icon {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background: white;
    border: 2px solid var(--gray-200);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 500;
    transition: all 0.3s ease;
    color: var(--gray-600);
}

.step.active .step-icon {
    border-color: var(--primary);
    color: var(--primary);
    background: white;
}

.step.completed .step-icon {
    background: var(--primary);
    border-color: var(--primary);
    color: white;
}

/* Step Labels */
.step-label {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--gray-600);
    text-align: center;
}

.step.active .step-label {
    color: var(--primary);
}

/* Main Checkout Container */
.checkout-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
}

/* Checkout Grid */
.checkout-grid {
    display: grid;
    grid-template-columns: 1.8fr 1fr;
    gap: 1.5rem;
    max-width: 1100px;
    margin: 0 auto;
}

/* Section Title */
.section-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--gray-700);
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

/* Addresses */
.addresses {
    display: grid;
    gap: 0.75rem;
    margin-bottom: 2rem;
}

.address-text {
    color: var(--gray-600);
    line-height: 1.4;
}

/* Address Cards */
.address-card {
    background: white;
    border: 1px solid var(--gray-200);
    border-radius: 8px;
    padding: 1rem;
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    cursor: pointer;
    transition: all 0.2s ease;
}

.address-card:hover {
    border-color: var(--primary);
    background-color: var(--gray-50);
}

.address-card input[type="radio"] {
    width: 18px;
    height: 18px;
    margin-top: 0.25rem;
    accent-color: var(--primary);
    cursor: pointer;
}

.address-card input[type="radio"]:checked + .address-details,
.address-card input[type="radio"]:checked + .address-details .address-name {
    color: var(--primary);
}

.address-details {
    flex: 1;
    font-size: 0.9375rem;
}

.address-name {
    font-weight: 600;
    margin-bottom: 0.25rem;
    color: var(--gray-700);
}

/* Products */
.products {
    display: grid;
    gap: 0.75rem;
}

/* Product Cards */
.product-card {
    background: white;
    border: 1px solid var(--gray-200);
    border-radius: 8px;
    padding: 0.875rem;
    display: flex;
    align-items: center;
    gap: 1rem;
}

.product-details {
    flex: 1;
}

.product-name {
    font-size: 0.9375rem;
    font-weight: 500;
    color: var(--gray-700);
    margin-bottom: 0.25rem;
}

.product-price {
    font-size: 1rem;
    font-weight: 600;
    color: var(--gray-700);
}

.product-image {
    width: 80px;
    height: 80px;
    border-radius: 6px;
    object-fit: cover;
    background-color: var(--gray-50);
}

.product-info {
    flex: 1;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
}

.product-info h3 {
    font-size: 1rem;
    font-weight: 500;
    margin-bottom: 0.5rem;
}

/* Order Summary */
.order-summary {
    background: white;
    border: 1px solid var(--gray-200);
    border-radius: 8px;
    padding: 1.25rem;
    position: sticky;
    top: 2rem;
}

.summary-row {
    display: flex;
    justify-content: space-between;
    padding: 0.75rem 0;
    color: var(--gray-600);
}

.summary-total {
    border-top: 1px solid var(--gray-200);
    margin-top: 1rem;
    padding-top: 1rem;
    font-weight: 600;
    color: var(--gray-700);
}

/* Continue Button */
.continue-btn {
    background: var(--primary);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 1rem;
    width: 100%;
    font-weight: 500;
    margin-top: 1.5rem;
    cursor: pointer;
    transition: all 0.2s ease;
}

.continue-btn:hover {
    background: var(--primary-dark);
    transform: translateY(-1px);
}

/* Responsive Styles */
@media (max-width: 768px) {
    .checkout-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
        padding: 1rem;
    }

    .product-info {
        flex-direction: column;
        align-items: flex-start;
    }
}

@media (max-width: 768px) {
    .checkout-grid {
        grid-template-columns: 1fr;
    }

    .progress-wrapper {
        padding: 0 1rem;
    }

    .step {
        width: auto;
    }

    .step-label {
        font-size: 0.75rem;
    }

    .step-icon {
        width: 40px;
        height: 40px;
    }

    .checkout-container {
        padding: 0 1rem;
    }
}

/* Header Section */
.checkout-header {
    background: white;
    padding: 2rem 1rem;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    margin-bottom: 2rem;
    font-family: 'Inter', system-ui, -apple-system, sans-serif;
}

/* Progress Bar Container */
.progress-container {
    max-width: 800px;
    margin: 0 auto;
    position: relative;
    padding: 0 1rem;
}

.progress-bar {
    position: absolute;
    top: 50%;
    left: 0;
    transform: translateY(-50%);
    height: 3px;
    width: 100%;
    background: #f0f0f0;
    z-index: 1;
}

.progress-bar-fill {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    background: #14CAD8;
    transition: width 0.3s ease;
    width: 50%; /* Adjust based on current step */
}

/* Steps Container */
.steps-container {
    position: relative;
    display: flex;
    justify-content: space-between;
    z-index: 2;
}

.step {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
}

/* Step Circle */
.step-circle {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: white;
    border: 2px solid #E5E7EB;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 500;
    transition: all 0.3s ease;
}

/* Active & Completed Step Styles */
.step.active .step-circle {
    border-color: #14CAD8;
    color: #14CAD8;
}

.step.completed .step-circle {
    background: #14CAD8;
    border-color: #14CAD8;
    color: white;
}

/* Step Labels */
.step-label {
    font-size: 0.875rem;
    font-weight: 500;
    color: #6B7280;
}

.step.active .step-label,
.step.completed .step-label {
    color: #14CAD8;
}

/* Responsive Styles */
@media (max-width: 640px) {
    .step-label {
        font-size: 0.75rem;
    }

    .step-circle {
        width: 32px;
        height: 32px;
    }
}

 /* Coupon Section */
.coupon-container {
    margin: 1rem 0 2rem 0;
}

.coupon-form {
    margin-top: 1rem;
}

.coupon-input-group {
    display: flex;
    gap: 0.5rem;
}

.coupon-input {
    flex: 1;
    padding: 0.75rem 1rem;
    border: 1px solid #e2e8f0;
    border-radius: 0.5rem;
    font-size: 0.875rem;
}

.apply-coupon, 
.remove-coupon {
    padding: 0.75rem 1.5rem;
    background-color: #FF3F6C;
    color: white;
    border: none;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    cursor: pointer;
    transition: background-color 0.2s;
}

.apply-coupon:hover, 
.remove-coupon:hover {
    background-color: #FF3F6C;
}

.remove-coupon {
    background: none;
    color: #FF3F6C;
    text-decoration: underline;
    padding: 0;
    margin-left: 0.5rem;
}

.remove-coupon:hover {
    background: none;
    color: #FF3F6C;
}

.coupon-success, 
.coupon-error {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    border-radius: 0.5rem;
    margin-top: 1rem;
    font-size: 0.875rem;
}

.coupon-success {
    background-color: #f0fdf4;
    border: 1px solid #bbf7d0;
    color: #166534;
}

.coupon-error {
    background-color: #fef2f2;
    border: 1px solid #fecaca;
    color: #991b1b;
}

.coupon-success svg {
    stroke: #166534;
}

.coupon-error svg {
    stroke: #991b1b;
}

.dis-coupon {
    margin-left: 137px;
}
</style>

<style>
/* Modal Background */
.modal {
    display: none; 
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
    overflow-y: auto;
    padding: 20px;
}

/* Modal Box */
.modal-content {
    background: #fff;
    padding: 20px;
    border-radius: 12px;
    width: 95%;
    max-width: 450px;
    position: relative;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    animation: fadeIn 0.3s ease-in-out;
    max-height: 85vh;
    overflow-y: auto;
    box-sizing: border-box;
}

/* Fade-in Animation */
@keyframes fadeIn {
    from { opacity: 0; transform: scale(0.9); }
    to { opacity: 1; transform: scale(1); }
}

/* Error Message */
.error-message {
    color: red;
    font-size: 12px;
    margin-top: 5px;
}

/* Close Button */
.close {
    position: absolute;
    top: 12px;
    right: 15px;
    font-size: 20px;
    font-weight: bold;
    cursor: pointer;
    color: #333;
}

.close:hover {
    color: #ff3f6c;
}

/* Input Fields */
.input-group {
    margin-bottom: 12px;
    width: 100%;
}

.input-group label {
    font-size: 14px;
    font-weight: 600;
    margin-bottom: 5px;
    display: block;
    color: #333;
}

.input-group input,
.input-group select {
    width: 100%;
    padding: 12px;
    font-size: 14px;
    border: 1px solid #ddd;
    border-radius: 8px;
    outline: none;
    transition: border 0.3s ease;
    box-sizing: border-box;
}

.input-group input:focus,
.input-group select:focus {
    border: 1px solid #ff3f6c;
}

/* Buttons */
.button-container {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.save-btn, .cancel-btn {
    width: 100%;
    padding: 12px;
    border: none;
    font-size: 14px;
    font-weight: bold;
    cursor: pointer;
    border-radius: 8px;
    transition: background 0.3s ease;
    box-sizing: border-box;
}

.cancel-btn {
    background: #f5f5f5;
    color: #333;
}

.cancel-btn:hover {
    background: #ddd;
}

.save-btn {
    background: #ff3f6c;
    color: #fff;
}

.save-btn:hover {
    background: #e6365f;
}

/* Responsive Design */
@media (max-width: 600px) {
    .modal {
        padding: 10px;
    }

    .modal-content {
        width: 100%;
        padding: 15px;
    }

    .button-container {
        flex-direction: column;
        gap: 8px;
    }
}

@media (min-width: 601px) and (max-width: 768px) {
    .modal-content {
        width: 90%;
        max-width: 400px;
    }
}

@media (min-width: 769px) {
    .modal-content {
        width: 80%;
        max-width: 450px;
    }

    .button-container {
        flex-direction: row;
        gap: 15px;
    }

    .save-btn, .cancel-btn {
        flex: 1;
    }
}

@media (min-width: 1024px) {
    .modal-content {
        width: 60%;
        max-width: 450px;
    }
}
</style>


<style>
/* Modal Background */
.coupon-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 9999;
    transition: all 0.3s ease-in-out;
    padding: 10px; /* Ensure padding for smaller screens */
    overflow-y: auto;
}

/* Modal Content */
.coupon-modal-content {
    background: #fff;
    max-width: 90%;
    width: 400px;
    margin: 10% auto;
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    animation: slideIn 0.3s ease-in-out;
}

/* Modal Header */
.coupon-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 18px;
    font-weight: 600;
    padding-bottom: 10px;
    border-bottom: 1px solid #ddd;
}

/* Close Button */
.close-modal {
    cursor: pointer;
    font-size: 22px;
    color: #555;
    font-weight: bold;
    transition: 0.3s;
}
.close-modal:hover {
    color: red;
}

/* Coupon Body */
.coupon-modal-body {
    margin-top: 15px;
    max-height: 300px;
    overflow-y: auto;
}

/* Individual Coupon */
.coupon-item {
    display: flex;
    flex-wrap: wrap;
    background: #f9f9f9;
    margin-bottom: 12px;
    border-radius: 8px;
    padding: 12px;
    align-items: center;
    transition: 0.3s ease;
    border: 1px solid #ddd;
}

/* Discount Badge */
.discount-badge {
    background: #ff3f6c;
    color: white;
    padding: 8px 14px;
    font-size: 16px;
    font-weight: bold;
    border-radius: 6px;
    text-align: center;
    min-width: 80px;
}
.discount-amount {
    display: block;
    font-size: 20px;
}
.discount-label {
    font-size: 12px;
}

/* Coupon Details */
.coupon-right {
    flex: 1;
    padding-left: 10px;
}
.coupon-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 14px;
    font-weight: 600;
    flex-wrap: wrap;
}
.coupon-tag {
    display: flex;
    align-items: center;
    background: #e6f3ff;
    padding: 4px 8px;
    border-radius: 5px;
    font-size: 12px;
    color: #0073e6;
}
.coupon-tag svg {
    margin-right: 4px;
}

/* Apply Coupon Button */
.use-coupon-btn {
    width: 100%;
    background: #ff3f6c;
    color: white;
    border: none;
    padding: 10px;
    border-radius: 6px;
    font-size: 14px;
    font-weight: bold;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    margin-top: 10px;
    transition: 0.3s;
}
.use-coupon-btn:hover {
    background: #e8325d;
}
.use-coupon-btn svg {
    margin-left: 8px;
}

/* No Coupons Available */
.no-coupons {
    text-align: center;
    color: #555;
    font-size: 14px;
    padding: 20px;
}

/* Animations */
@keyframes slideIn {
    from {
        transform: translateY(-50px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

/* View Coupons Button */
.view-coupons-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    background: #ff3f6c;
    color: white;
    font-size: 14px;
    font-weight: bold;
    padding: 10px 16px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.3s ease-in-out;
    outline: none;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

.view-coupons-btn:hover {
    background: #e8325d;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
}

/* Icon inside the button */
.view-coupons-btn svg {
    margin-right: 6px;
    stroke-width: 2.2;
}

/* Disabled State */
.view-coupons-btn:disabled {
    background: #d3d3d3;
    color: #888;
    cursor: not-allowed;
    box-shadow: none;
}

.remove-coupon-btn {
    display: flex;
    align-items: center;
    gap: 6px;
    background-color: #ff4d4d; /* Red */
    color: white;
    border: none;
    padding: 8px 12px;
    font-size: 14px;
    font-weight: 500;
    border-radius: 5px;
    cursor: pointer;
    transition: all 0.3s ease-in-out;
}

.remove-coupon-btn svg {
    width: 16px;
    height: 16px;
    stroke: white;
}

.remove-coupon-btn:hover {
    background-color: #e63939; /* Darker red */
    transform: scale(1.05);
}

/* Responsive Styles */
@media (max-width: 768px) {
    .coupon-modal-content {
        width: 90%;
        padding: 15px;
    }

    .coupon-item {
        flex-direction: column;
        align-items: flex-start;
    }

    .discount-badge {
        font-size: 14px;
        padding: 6px 10px;
        min-width: 60px;
    }

    .coupon-header {
        flex-direction: column;
        align-items: flex-start;
    }

    .coupon-tag {
        margin-top: 5px;
    }

    .use-coupon-btn {
        padding: 8px;
        font-size: 12px;
    }
}

@media (max-width: 480px) {
    .coupon-modal-content {
        width: 95%;
        padding: 10px;
    }

    .coupon-item {
        padding: 10px;
    }

    .discount-badge {
        font-size: 12px;
        padding: 5px 8px;
    }

    .coupon-header {
        font-size: 13px;
    }

    .use-coupon-btn {
        font-size: 12px;
        padding: 8px;
    }

    .view-coupons-btn {
        font-size: 13px;
        padding: 8px 12px;
    }

    .remove-coupon-btn {
        font-size: 12px;
        padding: 6px 10px;
    }
}
</style>
<!-- Header -->
<div class="checkout-header">
    <div class="progress-container">
        <div class="progress-bar">
            <div class="progress-bar-fill"></div>
        </div>
        <div class="steps-container">
            <% 
            const steps = [
                { id: 1, label: 'Cart', status: 'completed' },
                { id: 2, label: 'Shipping', status: 'active' },
                { id: 3, label: 'Payment', status: 'pending' },
                { id: 4, label: 'Confirmation', status: 'pending' }
            ];
            %>
            <% steps.forEach(step => { %>
                <div class="step <%= step.status %>">
                    <div class="step-circle">
                        <% if (step.status === 'completed') { %> ✓ <% } else { %> <%= step.id %> <% } %>
                    </div>
                    <span class="step-label"><%= step.label %></span>
                </div>
            <% }); %>
        </div>
    </div>
</div>
<!-- Header End -->

<div class="checkout-container">
    <div class="checkout-grid">
        <!-- Left Column -->
        <div class="main-content">
            
            <!-- Address Selection -->
            <h2 class="section-title">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                    <polyline points="9 22 9 12 15 12 15 22"></polyline>
                </svg>
                Select Delivery Address
            </h2>
            <div class="addresses">
                <% addresses.forEach(addressDoc => { %>
                    <% addressDoc.address.forEach(address => { %>
                        <label class="address-card" for="address-<%= address._id %>">
                            <input type="radio" name="address" id="address-<%= address._id %>">
                            <div class="address-details">
                                <div class="address-name"><%= address.name %></div>
                                <div class="address-text">
                                    <%= address.street %> <%= address.city %>, <%= address.pincode %>
                                </div>
                            </div>
                        </label>
                    <% }); %>
                <% }); %>
                <!-- Add New Address Button -->
                <div class="flex justify-end">
                    <button onclick="openModal()" 
                        class="add-address-btn flex items-center gap-1 px-3 py-2 border border-gray-400 rounded-md text-gray-700 text-sm font-medium hover:border-purple-500 hover:shadow-md transition">
                        <span class="text-purple-600 text-base">➕</span> Add Address
                    </button>
                </div>
                
            </div>

            <!-- Coupon Section -->
            <h2 class="section-title">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z" />
                </svg>
                Apply Coupon
            </h2>
            <div class="coupon-container">
                <% if (appliedCoupon || locals.couponApplied) { %>
                    <div class="coupon-success">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                            <polyline points="22 4 12 14.01 9 11.01"></polyline>
                        </svg>
                        <span>Coupon "<%= appliedCoupon.couponCode %>" applied successfully!</span>
                        <form class="remove-coupon-form">
                            <button type="submit" class="remove-coupon-btn" onclick="removeCoupon()">
                                <i class="fas fa-times-circle"></i> Remove Coupon
                            </button>
                        </form>                        
                    </div>
                <% } else { %>
                    <div class="coupon-input-group">
                        <input 
                            type="text" 
                            name="couponCode" 
                            id="couponCode"
                            placeholder="Enter coupon code"
                            class="coupon-input"
                            required
                        >
                        <button id="apply-coupon" class="apply-coupon" onclick="applyCoupon('<%= total.toFixed(2) %>')" 
                            <% if (locals.couponApplied) { %> disabled <% } %>>
                            Apply
                        </button>
                        <button id="view-coupons" class="view-coupons-btn" onclick="openCouponModal()" 
                        <% if (!coupons || coupons.length === 0) { %> disabled <% } %>>
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                        </svg>
                        View Coupons
                    </button>
                    </div>
                    <% if (locals.couponError) { %>
                        <div class="coupon-error">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <circle cx="12" cy="12" r="10"></circle>
                                <line x1="12" y1="8" x2="12" y2="12"></line>
                                <line x1="12" y1="16" x2="12.01" y2="16"></line>
                            </svg>
                            <span><%= couponError %></span>
                        </div>
                    <% } %>
                <% } %>
            </div>
            
            <!-- Order Items -->
            <h2 class="section-title">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"></path>
                    <line x1="3" y1="6" x2="21" y2="6"></line>
                    <path d="M16 10a4 4 0 0 1-8 0"></path>
                </svg>
                Order Items
            </h2>
            <div class="products">
                <% products.forEach(product => { %>
                    <div class="product-card">
                        <img class="product-image" src="/uploads/product-images/<%= product.productImage%>" alt="<%= product.productName %>">
                        <div class="product-info">
                            <div class="product-details">
                                <div class="product-name"><%= product.productName %></div>
                            </div>
                            <div class="product-quantity">
                                <strong>Quantity:</strong> <%= product.quantity %>
                            </div>
                            <div class="product-price">₹<%= product.totalPrice %></div>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>

            <!-- Right Column -->
            <div class="sidebar">
                <div class="order-summary">
                    <h2 class="section-title">Order Summary</h2>
                    <div class="summary-row">
                        <span>Subtotal</span>
                        <span>₹<%= subtotal.toFixed(2) %></span>
                    </div>
                    <div class="summary-row">
                        <span>Delivery</span>
                        <span>₹<%= delivery.toFixed(2) %></span>
                    </div>
                    <div class="summary-row" id="coupon-discount" style="display: none;">
                        <span>Coupon Discount</span>
                        <span class="dis-coupon" id="dis-coupon"></span>
                        <button onclick="removeCoupon()" class="remove-coupon-btn">
                            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <line x1="18" y1="6" x2="6" y2="18"></line>
                                <line x1="6" y1="6" x2="18" y2="18"></line>
                            </svg>
                            Remove Coupon
                        </button>
                    </div>
                    <div class="summary-row summary-total">
                        <span>Total</span>
                        <span id="total-amount">₹<%= total.toFixed(2) %></span>
                    </div>
                    <button class="continue-btn" id="continue-btn" >Continue to Payment</button>
                </div>
            </div>
    </div>
</div>
    <!-- Address Modal -->
    <div id="addressModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">x</span>
            <h2>Add New Address</h2>
            <form id="addressForm" action="/addAddressCheckout" method="POST">
                <div class="input-group">
                    <label for="addressType" style="margin-right: 3px;">Address Type </label>
                    <select id="addressType" name="addressType"   required>
                        <option value="Home">Home</option>
                        <option value="Business">Business</option>
                        <option value="Work">Work</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
    
                <div class="row">
                    <div class="input-group">
                        <label for="name">Full Name</label>
                        <input type="text" id="name" name="name">
                    </div>
                    <div class="input-group">
                        <label for="phone">Phone</label>
                        <input type="text" id="phone" name="phone">
                    </div>
                </div>
    
                <div class="row">
                    <div class="input-group">
                        <label for="altPhone">Alternate Phone</label>
                        <input type="text" id="altPhone" name="altPhone">
                    </div>
                    <div class="input-group">
                        <label for="pincode">Pincode</label>
                        <input type="text" id="pincode" name="pincode">
                    </div>
                </div>

                <div class="row">
                    <div class="input-group">
                        <label for="landMark">Landmark</label>
                        <input type="text" id="landMark" name="landMark">
                    </div>
                    <div class="input-group">
                        <label for="city">City</label>
                        <input type="text" id="city" name="city">
                    </div>
                </div>
    
                <div class="input-group">
                    <label for="state">State</label>
                    <input type="text" id="state" name="state">
                </div>
    
                <!-- Cancel & Save Buttons -->
                <div class="button-group">
                    <button type="button" class="cancel-btn" onclick="closeModal()">Cancel</button>
                    <button type="submit" class="save-btn">Save Address</button>
                </div>
            </form>
        </div>
    </div>

  <!-- Coupon Modal -->
<div id="coupon-modal" class="coupon-modal">
    <div class="coupon-modal-content">
        <div class="coupon-modal-header">
            <h3>Available Coupons</h3>
            <span class="close-modal" onclick="closeCouponModal()">×</span>
        </div>
        <div class="coupon-modal-body">
            <% if (coupons.length > 0) { %>
                <% coupons.forEach(function(coupon) { %>
                    <div class="coupon-item">
                        <div class="coupon-left">
                            <div class="discount-badge">
                                <span class="discount-amount">₹<%= coupon.offerPrice %></span>
                                <span class="discount-label">OFF</span>
                            </div>
                        </div>
                        <div class="coupon-right">
                            <div class="coupon-header">
                                <div class="coupon-name"><%= coupon.name %></div>
                                <div class="coupon-tag">
                                    <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <path d="M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"></path>
                                    </svg>
                                    SAVE
                                </div>
                            </div>
                            <div class="coupon-details">
                                <div class="min-order">Min. Order: ₹<%= coupon.minimumPrice %></div>
                                <div class="coupon-expiry">
                                    <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <circle cx="12" cy="12" r="10"></circle>
                                        <polyline points="12 6 12 12 16 14"></polyline>
                                    </svg>
                                    <span>Valid for today's order</span>
                                </div>
                            </div>
                            <button class="use-coupon-btn" onclick="useCoupon('<%= coupon.name %>')">
                                Apply Coupon
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <polyline points="9 18 15 12 9 6"></polyline>
                                </svg>
                            </button>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="no-coupons">No Coupons Available</div>
            <% } %>
        </div>
    </div>
</div>



<script>
function openCouponModal() {
        document.getElementById('coupon-modal').style.display = 'block';
        document.body.style.overflow = 'hidden';
}

    function closeCouponModal() {
        document.getElementById('coupon-modal').style.display = 'none';
        document.body.style.overflow = 'auto'; 
    }

    function useCoupon(couponCode) {
        document.getElementById('couponCode').value = couponCode;
        closeCouponModal();
     
    }
 
    window.onclick = function(event) {
        const modal = document.getElementById('coupon-modal');
        if (event.target === modal) {
            closeCouponModal();
        }
    }


    async function applyCoupon(productPrice) {
    const couponCode = document.getElementById('couponCode').value;

    const response = await fetch('/applyCoupon', {
        method: 'POST',
        headers: {
            'Content-type': 'application/json'
        },
        body: JSON.stringify({ couponCode, productPrice })
    });

    const result = await response.json();

    if (result.success) {
        Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: result.message || 'Coupon applied successfully!',
            showConfirmButton: false,
            timer: 2000
        }).then(() => {
            
            const totalAmountElement = document.getElementById('total-amount');
            const totalAmount = parseFloat(totalAmountElement.textContent.replace('₹', '').trim());
            const offerPrice = result.offerPrice

            console.log('Offer price for coupon: ', offerPrice);

            totalAmountElement.textContent = `₹${(totalAmount - offerPrice).toFixed(2)}`;

            const couponDiscountElement = document.getElementById('coupon-discount'); 
            const discountValueElement = couponDiscountElement.querySelector('.dis-coupon'); 

            couponDiscountElement.style.display = 'block';

            const applyCoupon = document.getElementById('apply-coupon')
            applyCoupon.disabled = true

            discountValueElement.textContent = `-₹${offerPrice.toFixed(2)}`;               
        });

        return;
    }

    Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: result.message || 'Coupon not found! Try again',
        confirmButtonColor: '#d33'
    });
}

const couponCheck = '<%= appliedCoupon %>'

let couponApplied = null

if (couponCheck) {
    couponApplied = JSON.parse('<%- JSON.stringify(appliedCoupon) %>');
    console.log('applied coupon: ', couponApplied);
    console.log('applied coupon values: ', couponApplied.couponName);
}


if (couponApplied) {
    const totalAmountElement = document.getElementById('total-amount');
            const totalAmount = parseFloat(totalAmountElement.textContent.replace('₹', '').trim());
            const offerPrice = couponApplied.couponOfferPrice;

            console.log('Offer price for coupon: ', offerPrice);

            totalAmountElement.textContent = `₹${(totalAmount - offerPrice).toFixed(2)}`;

            const couponDiscountElement = document.getElementById('coupon-discount'); 
            const discountValueElement = couponDiscountElement.querySelector('.dis-coupon'); 

            couponDiscountElement.style.display = 'block';

            // const applyCoupon = document.getElementById('apply-coupon')
            // applyCoupon.disabled = true

            discountValueElement.textContent = `-₹${offerPrice.toFixed(2)}`;               
}


async function removeCoupon(couponCode) {
        
        const response = await fetch('/removeCoupon', {
            method: 'PATCH',
            headers: {
                'Content-type': 'application/json'
            },
            body: JSON.stringify({ couponCode })
        })
    
        const result = await response.json()
    
        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: result.message || 'Coupon removed successfully!',
            }).then(() => {
                window.location.reload();
                return;
            })
        }
    
    
        Swal.fire({
                icon: 'Error',
                title: 'Error',
                text: result.message || 'Error while removing the coupon!!',
        })
    }

</script>

<!-- Modal JavaScript -->
<script>
// Attach validation to form submit event
document.getElementById('addressForm').addEventListener('submit', validateForm);

// Function to validate the form
function validateForm(event) {
    event.preventDefault(); // Prevent form submission

    // Get input values
    const name = document.getElementById('name').value.trim();
    const phone = document.getElementById('phone').value.trim();
    const altPhone = document.getElementById('altPhone').value.trim();
    const pincode = document.getElementById('pincode').value.trim();
    const city = document.getElementById('city').value.trim();
    const state = document.getElementById('state').value.trim();
    const landMark = document.getElementById("landMark").value.trim();

    // Reset error styles
    resetErrors();

    let isValid = true;

    // Name validation (at least 3 characters, only letters)
    if (!name) {
        showError("name", "Full Name is required")
        isValid = false
    } else if (name.length < 3) {
        showError("name", "Full Name must be at least 3 characters")
        isValid = false
    } else if (!/^[a-zA-Z\s]+$/.test(name)) {
        showError("name", "Only letters allowed in Full Name")
        isValid = false
    }

    // Phone validation (10 digits)
    if (!phone) {
        showError('phone', 'Phone number is required');
        isValid = false;
    } else if (!/^\d{10}$/.test(phone)) {
        showError('phone', 'Phone number must be exactly 10 digits');
        isValid = false;
    }

    // Alternate Phone validation (optional but must be 10 digits and different from phone)
    if (altPhone) {
        if (!/^\d{10}$/.test(altPhone)) {
            showError('altPhone', 'Alternate Phone must be exactly 10 digits');
            isValid = false;
        } else if (altPhone === phone) {
            showError('altPhone', 'Alternate Phone cannot be the same as Phone');
            isValid = false;
        }
    }

    // Pincode validation (6 digits)
    if (!pincode) {
        showError('pincode', 'Pincode is required');
        isValid = false;
    } else if (!/^\d{6}$/.test(pincode)) {
        showError('pincode', 'Pincode must be exactly 6 digits');
        isValid = false;
    }

    // City validation (only letters allowed)
    if (!city) {
        showError('city', 'City is required');
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(city)) {
        showError('city', 'City must contain only letters');
        isValid = false;
    }

     // Landmark validation (at least 3 characters, letters & numbers allowed)
     if (!landMark) {
        showError("landMark", "Landmark is required")
        isValid = false
    } else if (landMark.length < 3) {
        showError("landMark", "Landmark must be at least 3 characters")
        isValid = false
    } else if (!/^[a-zA-Z0-9\s]+$/.test(landMark)) {
        showError("landMark", "Only letters and numbers allowed in Landmark")
        isValid = false
    }

    // State validation (only letters allowed)
    if (!state) {
        showError('state', 'State is required');
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(state)) {
        showError('state', 'State must contain only letters');
        isValid = false;
    }

    // If all fields are valid, submit the form
    if (isValid) {
        document.getElementById('addressForm').submit();
    }
}

// Function to show error messages
function showError(fieldId, message) {
    const inputField = document.getElementById(fieldId);
    const inputGroup = inputField.closest('.input-group');
    let errorElement = inputGroup.querySelector('.error-message');

    if (!errorElement) {
        errorElement = document.createElement('div');
        errorElement.className = 'error-message';
        errorElement.style.color = 'red';
        errorElement.style.fontSize = '12px';
        errorElement.style.marginTop = '5px';
        inputGroup.appendChild(errorElement);
    }

    errorElement.textContent = message;
    inputField.style.border = '1px solid red';
}

// Function to reset errors
function resetErrors() {
    document.querySelectorAll('.error-message').forEach(error => error.remove());
    document.querySelectorAll('.input-group input, .input-group select').forEach(input => {
        input.style.border = '1px solid #ccc';
    });
}


// Get Elements
const modal = document.getElementById('addressModal');
const addAddressBtn = document.querySelector('.add-address-btn');
const closeBtn = document.querySelector('.close'); // Fixed class selector
const cancelBtn = document.querySelector('.cancel-btn'); // Now exists in HTML
const addressForm = document.getElementById('addressForm'); // Fixed missing id

// Open Modal when clicking "Add New Address"
if (addAddressBtn) {
    addAddressBtn.addEventListener('click', () => {
        modal.style.display = 'flex'; // Keep 'flex' for modal positioning
        document.body.style.overflow = 'hidden'; // Prevent scrolling
    });
}

// Close Modal Function
function closeModal() {
    modal.style.display = 'none';
    document.body.style.overflow = 'auto'; // Restore scrolling

    // Reset form fields when closing modal
    if (addressForm) {
        addressForm.reset();
    }
}

// Close modal when clicking (X) button
if (closeBtn) {
    closeBtn.addEventListener('click', closeModal);
}

// Close modal when clicking "Cancel" button
if (cancelBtn) {
    cancelBtn.addEventListener('click', closeModal);
}

// Close modal when clicking outside the content
window.addEventListener('click', (event) => {
    if (event.target === modal) {
        closeModal();
    }
});

</script>

<script>
const continueBtn = document.getElementById('continue-btn');

continueBtn.addEventListener('click', (e) => {
    e.preventDefault();

    const selectedAddress = document.querySelector('input[name="address"]:checked');

    if (!selectedAddress) {
        Swal.fire({
            icon: 'warning',
            title: 'Address Required',
            text: 'Please select an address before proceeding.',
            confirmButtonColor: '#FF3F6C'
        })
        return
    }

    const addressId = selectedAddress.id.replace('address-', '');
    window.location.href = `/payment?id=${addressId}`;
});

</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
<%- include("../../views/partials/user/footer") %>




