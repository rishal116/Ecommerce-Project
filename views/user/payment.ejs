<%- include("../../views/partials/user/header") %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<style>
:root {
    --primary: #FF3F6c;
    --gray-50: #F9FAFB;
    --gray-100: #F3F4F6;
    --gray-200: #E5E7EB;
    --gray-600: #4B5563;
    --gray-700: #374151;
    --yellow-400: #FF3F6c;
    --green-500: #22C55E;
}

/* ✨ General Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Poppins', sans-serif;
    background-color: var(--gray-50);
    color: var(--gray-700);
    line-height: 1.5;
}

/* 🏦 Payment Section */
.payment-container {
    max-width: 1100px;
    margin: 0 auto;
    padding: 2rem;
    display: grid;
    grid-template-columns: 1.8fr 1fr;
    gap: 2rem;
}

.payment-methods {
    background: white;
    border-radius: 12px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.payment-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    color: var(--gray-700);
}

.payment-option {
    display: flex;
    align-items: center;
    padding: 1.25rem;
    border-bottom: 1px solid var(--gray-200);
    cursor: pointer;
}

.payment-option:last-child {
    border-bottom: none;
}

.payment-icon {
    width: 24px;
    height: 24px;
    margin-right: 1rem;
    color: var(--gray-600);
}

.payment-label {
    font-weight: 500;
    color: var(--gray-700);
}

/* ✅ Cash on Delivery Section */
.cod-section {
    padding: 1.5rem;
    background: var(--gray-50);
}

.cod-info {
    color: var(--gray-600);
    margin-bottom: 1rem;
    font-size: 0.9375rem;
}

/* 🛒 Pay Button */
.pay-button {
    background: var(--yellow-400);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 0.875rem;
    width: 100%;
    font-weight: 600;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.2s ease;
}

.pay-button:hover {
    opacity: 0.9;
}

/* 📌 Divider */
.divider {
    text-align: center;
    position: relative;
    margin: 1.5rem 0;
    color: var(--gray-600);
}

.divider::before,
.divider::after {
    content: "";
    position: absolute;
    top: 50%;
    width: 45%;
    height: 1px;
    background: var(--gray-200);
}

.divider::before {
    left: 0;
}

.divider::after {
    right: 0;
}

/* 💰 Save Offer Section */
.save-offer {
    background: white;
    border: 1px solid var(--gray-200);
    border-radius: 8px;
    padding: 1rem;
    text-align: center;
    margin: 1rem 0;
    font-weight: 500;
}

/* 📦 Order Summary */
.order-summary {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.delivery-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background: white;
    border: 1px solid var(--gray-200);
    border-radius: 8px;
    margin-bottom: 1rem;
}

.delivery-tag {
    background: #FFF6F4;
    color: var(--primary);
    padding: 0.25rem 0.75rem;
    border-radius: 4px;
    font-size: 0.875rem;
}

.price-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.75rem;
    color: var(--gray-600);
}

.price-total {
    color: var(--gray-700);
    font-weight: 600;
}

.price-discount {
    color: var(--green-500);
}

/* ✅ Trust Badges */
.trust-badges {
    display: flex;
    justify-content: space-around;
    margin-top: 2rem;
    padding-top: 1rem;
    border-top: 1px solid var(--gray-200);
}

.trust-badge {
    text-align: center;
    font-size: 0.75rem;
    color: var(--gray-600);
}

/* 🚀 Checkout Header */
.checkout-header {
    background: white;
    padding: 2rem 1rem;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    margin-bottom: 2rem;
}

.progress-container {
    max-width: 800px;
    margin: 0 auto;
    position: relative;
    padding: 0 1rem;
}

.progress-bar {
    position: absolute;
    top: 50%;
    left: 0;
    transform: translateY(-50%);
    height: 3px;
    width: 100%;
    background: #f0f0f0;
    z-index: 1;
}

.progress-bar-fill {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    background: #14CAD8;
    transition: width 0.3s ease;
    width: 75%; /* Adjust based on current step */
}

.steps-container {
    position: relative;
    display: flex;
    justify-content: space-between;
    z-index: 2;
}

.step {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
}

.step-circle {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: white;
    border: 2px solid var(--gray-200);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 500;
    transition: all 0.3s ease;
}

.step.active .step-circle {
    border-color: #14CAD8;
    color: #14CAD8;
}

.step.completed .step-circle {
    background: #14CAD8;
    border-color: #14CAD8;
    color: white;
}

.step-label {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--gray-600);
}

.step.active .step-label,
.step.completed .step-label {
    color: #14CAD8;
}

/* 📱 Responsive Design */
@media (max-width: 768px) {
    .payment-container {
        grid-template-columns: 1fr; /* Single column on smaller screens */
        padding: 1rem;
    }

    .step-circle {
        width: 32px;
        height: 32px;
    }

    .step-label {
        font-size: 0.75rem;
    }
}
/* Modal Base Styles */
.modal {
  display: none;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  overflow: auto;
}

.modal-content {
  background-color: #fff;
  margin: 15% auto;
  width: 100%;
  max-width: 420px;
  border-radius: 4px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  animation: modalSlideIn 0.3s ease;
}

@keyframes modalSlideIn {
  from {transform: translateY(-30px); opacity: 0;}
  to {transform: translateY(0); opacity: 1;}
}

/* Modal Header */
.modal-header {
  padding: 16px 24px;
  border-bottom: 1px solid #f5f5f6;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.modal-header h2 {
  font-size: 16px;
  font-weight: 600;
  color: #282c3f;
  margin: 0;
}

.close-modal {
  background: none;
  border: none;
  font-size: 24px;
  color: #94969f;
  cursor: pointer;
  padding: 0;
}

.close-modal:hover {
  color: #ff3e6c;
}

/* Modal Body */
.modal-body {
  padding: 24px;
}

/* Wallet Info */
.wallet-info {
  margin-bottom: 24px;
}

.wallet-info > div {
  display: flex;
  justify-content: space-between;
  margin-bottom: 16px;
  padding-bottom: 16px;
  border-bottom: 1px solid #f5f5f6;
}

.wallet-info > div:last-child {
  border-bottom: none;
  margin-bottom: 0;
  padding-bottom: 0;
}

.wallet-balance .label {
  font-size: 14px;
  color: #282c3f;
}

.wallet-balance .amount {
  font-size: 16px;
  font-weight: 600;
  color: #282c3f;
}

.payment-amount .label {
  font-size: 14px;
  color: #282c3f;
}

.payment-amount .amount {
  font-size: 16px;
  font-weight: 600;
  color: #282c3f;
}

.balance-after {
  margin-top: 8px;
}

.balance-after .label {
  font-size: 14px;
  color: #282c3f;
}

.balance-after .amount {
  font-size: 16px;
  font-weight: 600;
  color: #03a685;
}

/* Confirm Button */
.confirm-payment-btn {
  width: 100%;
  background-color: #ff3e6c;
  color: white;
  border: none;
  border-radius: 4px;
  padding: 12px 16px;
  font-size: 14px;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.confirm-payment-btn:hover {
  background-color: #ff527b;
}

/* Low Balance Warning */
.low-balance-warning {
  color: #ff3e6c;
  font-size: 12px;
  margin-top: 8px;
  display: none;
}

/* Responsive adjustments */
@media (max-width: 480px) {
  .modal-content {
    margin: 0;
    max-width: none;
    height: 100%;
    border-radius: 0;
  }
}

</style>
    <!-- header section -->
    <div class="checkout-header">
        <div class="progress-container">
            <div class="progress-bar">
                <div class="progress-bar-fill"></div>
            </div>
            <div class="steps-container">
                <% 
                const steps = [
                    { id: 1, label: 'Cart', status: 'completed' },
                    { id: 2, label: 'Shipping', status: 'completed' },
                    { id: 3, label: 'Payment', status: 'active' },
                    { id: 4, label: 'Confirmation', status: 'pending' }
                ];
                %>
                <% steps.forEach(step => { %>
                    <div class="step <%= step.status %>">
                        <div class="step-circle">
                            <% if (step.status === 'completed') { %>
                                ✓
                            <% } else { %>
                                <%= step.id %>
                            <% } %>
                        </div>
                        <span class="step-label"><%= step.label %></span>
                    </div>
                <% }); %>
            </div>
        </div>
    </div>
    <!-- header section end -->
    <div class="payment-container">
        <div class="payment-section">
            <h1 class="payment-title">Choose Your Payment Method</h1>
            
            <div class="payment-methods">
                <% 
                const paymentMethods = [
                    { id: 'upi', icon: '📱', label: 'Online' },
                    { id: 'wallet', icon: '💳', label: 'Wallet' },
                    { id: 'Cash on Delivery', icon: '💵', label: 'Cash On Delivery', active: true }
                ];
                %>

                <% paymentMethods.forEach(method => { %>
                    <label class="payment-option <%= method.active ? 'active' : '' %>">
                        <input 
                            type="radio" 
                            name="payment" 
                            value="<%= method.id %>" 
                            <%= method.active ? 'checked' : '' %>
                            style="margin-right: 1rem;"
                        >
                        <span class="payment-icon"><%= method.icon %></span>
                        <span class="payment-label"><%= method.label %></span>
                    </label>
                <% }); %>

                <div class="cod-section">
                    <p class="cod-info">
                        Additional cash collection charges of ₹ <%= cashCollectionCharge %> is applicable on this order.
                    </p>
                     <!-- Hidden Payment Amount for JavaScript -->
                    <p id="paymentAmount" style="display: none;"><%= total.toFixed(2) %></p>
                    <button class="pay-button text-white" id="pay-btn">PAY ₹<%= total.toFixed(2) %></button>
                </div>

                <div class="divider">OR</div>

                <div class="save-offer">
                    Pay via **UPI, Wallet, or Card** and save handling charges
                    <div style="color: var(--gray-700); font-weight: 600; margin-top: 0.5rem;">
                        Pay now and save ₹ <%= cashCollectionCharge %>
                    </div>
                </div>
            </div>
        </div>

        <div class="summary-section">
            <div class="order-summary">
                <div class="delivery-header">
                    <span>Delivering order to <%= customerName %></span>
                    <span class="delivery-tag"><%= deliveryType %></span>
                </div>

                <div class="items-section">
                    <h4 style="margin-bottom: 1rem;">Items (<%= itemCount %>)</h4>
                    <% items.forEach(item => { %>
                        <div class="price-row">
                            <span><%= item.name %> (Qty: <%= item.quantity %>)</span>
                            <span>₹<%= item.totalPrice.toFixed(2) %></span>
                         </div>
                    <% }); %>
                </div>
                

                <h5 style="margin: 1.5rem 0 1rem;">PRICE SUMMARY</h5>
                <div class="price-row">
                    <span>Total MRP (Incl. of taxes)</span>
                    <span>₹<%= totalMRP.toFixed(2) %></span>
                </div>
                <%if(offerPrice>0){%>
                <div class="price-row">
                    <span>Coupon discount</span>
                    <span class="price-discount" style="color: red;">-₹<%=offerPrice%></span>
                </div>
                <%}%>
                <div class="price-row">
                    <span>Delivery Fee</span>
                    <span class="price-discount">₹<%=delivery%></span>
                </div>
                <div class="price-row price-total">
                    <span>Total</span>
                    <span> ₹<%= total.toFixed(2) %> </span> 
                </div>

                <div class="trust-badges">
                    <div class="trust-badge">
                        ✓<br>100% SECURE
                    </div>
                    <div class="trust-badge">
                        ↺<br>EASY RETURNS & REFUNDS
                    </div>
                    <div class="trust-badge">
                        ★<br>100% GENUINE
                    </div>
                </div>
            </div>
        </div>
    </div>

        <!-- wallet modal -->
        <div id="walletModal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2>Pay with Wallet</h2>
                    <button class="close-modal">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="wallet-info">
                        <div class="wallet-balance">
                            <span class="label">Available Balance</span>
                            <span class="amount">₹<span id="walletBalance"> <%= walletBalance.toFixed(2) %> </span></span>
                        </div>
                        <div class="payment-amount">
                            <span class="label">Payment Amount</span>
                            <span class="amount">₹<span id="paymentAmount"> <%= total.toFixed(2) %> </span></span>
                        </div>
                        <div class="balance-after">
                            <span class="label">Balance After Payment</span>
                            <span class="amount">₹<span id="balanceAfter"> <%= balanceAfterPayment.toFixed(2) %> </span></span>
                        </div>
                    </div>
                    <button id="confirmWalletPayment" class="confirm-payment-btn">
                        Confirm Payment
                    </button>
                </div>
            </div>
        </div>

<script>

        document.getElementById("pay-btn").addEventListener("click", async function () {
        
            const paymentMethod = document.querySelector('input[name="payment"]:checked').value;
            const selectedAddressId = "<%= selectedAddressId %>"; 
        
            if (paymentMethod === "upi") {
                try {
                    const response = await fetch("/createOrder", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({ amount: '<%= total %>', currency: "INR" }),
                    });
        
                    const data = await response.json();
                    if (!data.success) throw new Error("Failed to create order");
        
                    const options = {
        
                        key: "rzp_test_26GdHBN8ltzDQr",
                        amount: data.order.amount,
                        currency: data.order.currency,
                        order_id: data.order.id,
                        name: "Trendy Threads",
                        description: "Test Transaction",
                        handler: async function (response) {
                            Swal.fire({
                                title: "Payment Successful!",
                                text: "Payment ID: " + response.razorpay_payment_id,
                                icon: "success",
                                confirmButtonColor: "#28a745",
                                confirmButtonText: "OK",
                            }).then(async () => {
                                const orderResponse = await fetch('/orderPlaced', {
                                    method: 'POST',
                                    headers: { 'Content-type': 'application/json' },
                                    body: JSON.stringify({ paymentMethod, addressId: selectedAddressId })
                                });
        
                                const result = await orderResponse.json();
        
                                if (result.success) {
                                    window.location.href = '/orderConformed';
                                } else {
                                    Swal.fire({
                                        title: "Error while saving the order!",
                                        text: result.message || 'Error happened!',
                                        icon: "error",
                                        confirmButtonColor: "#dc3545",
                                        confirmButtonText: "Try Again",
                                    });
                                }
                            });
                        },
                        prefill: {
                            email: "test@example.com",
                            contact: "9999999999",
                        },
                        theme: { color: "#3399cc" },
                        modal: {
                            ondismiss: async function () {
        
                                const amountInRupees = options.amount / 100;
        
                                const paymentFailResponse = await fetch('/orderPlaced', {
                                    method: 'POST',
                                    headers: { 'Content-type': 'application/json' },
                                    body: JSON.stringify({ paymentMethod, addressId: selectedAddressId, snum: 'payment-fail' })
                                });
        
                                const result = await paymentFailResponse.json() 
        
                                if (result.success) {
                                    window.location.href = `/payment-failure?orderId=${data.order.id}&paymentMethod="upi"&addressId=${selectedAddressId}`;
                                    return;
                                }
                                
                            }
                        }
                    };
        
                    const rzp = new Razorpay(options);
                    rzp.open();
        
                } catch (error) {
                    Swal.fire({
                        title: "Payment Failed!",
                        text: error.message,
                        icon: "error",
                        confirmButtonColor: "#dc3545",
                        confirmButtonText: "Try Again",
                    }).then(() => {
        
                       console.log('selected address id: ', selectedAddressId);  
                       window.location.href = `/payment-failure?orderId=${data.order.id}&paymentMethod=RAZORPAY&addressId=${selectedAddressId}`;
        
                    });
                }
            } else if (paymentMethod === 'wallet') {
        
                const modal = document.getElementById('walletModal');
                modal.style.display = 'block';
                
                document.querySelector('.close-modal').onclick = function() {
                    modal.style.display = 'none';
                };
        
                window.onclick = function(event) {
                    if (event.target === modal) {
                        modal.style.display = 'none';
                    }
                };
        
                document.getElementById('confirmWalletPayment').onclick = async function() {
        
                    console.log('Processing wallet payment...');
            
                    this.innerHTML = 'Processing...';
                    this.disabled = true;
        
                    setTimeout(() => {
        
                        modal.style.display = 'none';
        
                    }, 2000);
        
                    const paymentAmount = '<%= total %>'
        
                    const response = await fetch('/payWithWallet', {
        
                        method: 'POST',
                        headers: {
                            'Content-type': 'application/json'
                        },
                        body: JSON.stringify({ paymentAmount })
                    })
        
                    const result = await response.json()
        
                    if (result.success) {
        
                        const walletResponse = await fetch('/orderPlaced', {
        
                            method: 'POST',
                            headers: { 'Content-type': 'application/json' },
                            body: JSON.stringify({ paymentMethod, addressId: selectedAddressId })
        
                        });
        
        
                        const walletResult = await walletResponse.json()
        
                        if (walletResult.success) {
                            Swal.fire({
                                title: "Payment Successful!",
                                text: "Your payment has been completed using your wallet.",
                                icon: "success",
                                confirmButtonText: "OK"
                            }).then(() => {
                                window.location.href = '/orderConformed';
                            });
                            return;
                        }
        
        
                        Swal.fire({
                            title: "Error while saving the order!",
                            text: walletResult.message || 'Error happened!',
                            icon: "error",
                            confirmButtonColor: "#dc3545",
                            confirmButtonText: "Try Again",
                        });
        
                        return;
                    }
        
                    Swal.fire({
                        title: "Payment Failed!",
                        text: result.message,
                        icon: "error",
                        confirmButtonText: "Try Again"
                    });
        
                };
              
            } else {
        
                const paymentAmount = document.getElementById('paymentAmount').textContent.trim();
        
                console.log('payment amount on cash on delevery: ', paymentAmount);
        
                if (paymentAmount >= 1000) {
                    
                    Swal.fire({
                        icon: 'warning',
                        title: 'COD Not Available',
                        text: 'Cash on Delivery is not available for orders above ₹1000.',
                        confirmButtonText: 'OK'
                    });
                    
                    return;
                }
        
                Swal.fire({
                    title: "Cash on Delivery Selected!",
                    text: "Your order will be placed with COD.",
                    icon: "info",
                    confirmButtonColor: "#007bff",
                    confirmButtonText: "OK",
                }).then(async () => {
                    const response = await fetch('/orderPlaced', {
                        method: 'POST',
                        headers: { 'Content-type': 'application/json' },
                        body: JSON.stringify({ paymentMethod, addressId: selectedAddressId })
                    });
        
                    const result = await response.json();
        
                    if (result.success) {
                        window.location.href = '/orderConformed';
                    } else {
                        Swal.fire({
                            title: "Error while saving the order!",
                            text: result.message || 'Error happened!',
                            icon: "error",
                            confirmButtonColor: "#dc3545",
                            confirmButtonText: "Try Again",
                        });
                    }
                });
            }
        });
        
</script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<%- include("../../views/partials/user/footer") %>