<%- include("../../views/partials/user/header") %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <style>
        :root {
            --primary: #FF3F6c;
            --gray-50: #F9FAFB;
            --gray-100: #F3F4F6;
            --gray-200: #E5E7EB;
            --gray-600: #4B5563;
            --gray-700: #374151;
            --yellow-400:#FF3F6c;
        --green-500: #22C55E;
        }

        .payment-container {
            max-width: 1100px;
            margin: 0 auto;
            padding: 2rem;
            display: grid;
            grid-template-columns: 1.8fr 1fr;
            gap: 2rem;
        }

        .payment-methods {
            background: white;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .payment-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            color: var(--gray-700);
        }

        .payment-option {
            display: flex;
            align-items: center;
            padding: 1.25rem;
            border-bottom: 1px solid var(--gray-200);
            cursor: pointer;
        }

        .payment-option:last-child {
            border-bottom: none;
        }

        .payment-icon {
            width: 24px;
            height: 24px;
            margin-right: 1rem;
            color: var(--gray-600);
        }

        .payment-label {
            font-weight: 500;
            color: var(--gray-700);
        }

        .cod-section {
            padding: 1.5rem;
            background: var(--gray-50);
        }

        .cod-info {
            color: var(--gray-600);
            margin-bottom: 1rem;
            font-size: 0.9375rem;
        }

        .pay-button {
            background: var(--yellow-400);
            color: var(--gray-700);
            border: none;
            border-radius: 8px;
            padding: 0.875rem;
            width: 100%;
            font-weight: 600;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .pay-button:hover {
            opacity: 0.9;
        }

        .divider {
            text-align: center;
            position: relative;
            margin: 1.5rem 0;
            color: var(--gray-600);
        }

        .divider::before,
        .divider::after {
            content: "";
            position: absolute;
            top: 50%;
            width: 45%;
            height: 1px;
            background: var(--gray-200);
        }

        .divider::before {
            left: 0;
        }

        .divider::after {
            right: 0;
        }

        .save-offer {
            background: white;
            border: 1px solid var(--gray-200);
            border-radius: 8px;
            padding: 1rem;
            text-align: center;
            margin: 1rem 0;
            font-weight: 500;
        }

        /* Order Summary Styles */
        .order-summary {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .delivery-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            background: white;
            border: 1px solid var(--gray-200);
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        .delivery-tag {
            background: #FFF6F4;
            color: #FF3F6c;
            padding: 0.25rem 0.75rem;
            border-radius: 4px;
            font-size: 0.875rem;
        }

        .price-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.75rem;
            color: var(--gray-600);
        }

        .price-total {
            color: var(--gray-700);
            font-weight: 600;
        }

        .price-discount {
            color: var(--green-500);
        }

        .trust-badges {
            display: flex;
            justify-content: space-around;
            margin-top: 2rem;
            padding-top: 1rem;
            border-top: 1px solid var(--gray-200);
        }

        .trust-badge {
            text-align: center;
            font-size: 0.75rem;
            color: var(--gray-600);
        }




        /* header section  */

        
        .checkout-header {
            background: white;
            padding: 2rem 1rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            margin-bottom: 2rem;
        }

        .progress-container {
            max-width: 800px;
            margin: 0 auto;
            position: relative;
            padding: 0 1rem;
        }

        .progress-bar {
            position: absolute;
            top: 50%;
            left: 0;
            transform: translateY(-50%);
            height: 3px;
            width: 100%;
            background: #f0f0f0;
            z-index: 1;
        }

        .progress-bar-fill {
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            background:#14CAD8;
            transition: width 0.3s ease;
            width: 75%; /* Adjust based on current step */
        }

        .steps-container {
            position: relative;
            display: flex;
            justify-content: space-between;
            z-index: 2;
        }

        .step {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.5rem;
        }

        .step-circle {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: white;
            border: 2px solid #E5E7EB;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .step.active .step-circle {
            border-color:#14CAD8;
            color: #14CAD8;
        }

        .step.completed .step-circle {
            background: #14CAD8;
            border-color:#14CAD8;
            color: white;
        }

        .step-label {
            font-size: 0.875rem;
            font-weight: 500;
            color: #6B7280;
        }

        .step.active .step-label {
            color:#14CAD8;
        }

        .step.completed .step-label {
            color:#14CAD8;
        }

        @media (max-width: 640px) {
            .step-label {
                font-size: 0.75rem;
            }
            
            .step-circle {
                width: 32px;
                height: 32px;
            }
        }

        .footer-div {
            margin-top: 60px;
        }


    </style>


    <!-- header section -->

    <div class="checkout-header">
        <div class="progress-container">
            <div class="progress-bar">
                <div class="progress-bar-fill"></div>
            </div>
            <div class="steps-container">
                <% 
                const steps = [
                    { id: 1, label: 'Cart', status: 'completed' },
                    { id: 2, label: 'Shipping', status: 'completed' },
                    { id: 3, label: 'Payment', status: 'active' },
                    { id: 4, label: 'Confirmation', status: 'pending' }
                ];
                %>
                <% steps.forEach(step => { %>
                    <div class="step <%= step.status %>">
                        <div class="step-circle">
                            <% if (step.status === 'completed') { %>
                                âœ“
                            <% } else { %>
                                <%= step.id %>
                            <% } %>
                        </div>
                        <span class="step-label"><%= step.label %></span>
                    </div>
                <% }); %>
            </div>
        </div>
    </div>


    <!-- header section end -->


    <div class="payment-container">
        <div class="payment-section">
            <h1 class="payment-title">Choose Your Payment Method</h1>
            
            <div class="payment-methods">
                <% 
                const paymentMethods = [
                    { id: 'upi', icon: 'ðŸ“±', label: 'UPI' },
                    { id: 'Cash on Delivery', icon: 'ðŸ’µ', label: 'Cash On Delivery', active: true }
                ];
                %>

                <% paymentMethods.forEach(method => { %>
                    <label class="payment-option <%= method.active ? 'active' : '' %>">
                        <input 
                            type="radio" 
                            name="payment" 
                            value="<%= method.id %>" 
                            <%= method.active ? 'checked' : '' %>
                            style="margin-right: 1rem;"
                        >
                        <span class="payment-icon"><%= method.icon %></span>
                        <span class="payment-label"><%= method.label %></span>
                    </label>
                <% }); %>

                <div class="cod-section">
                    <p class="cod-info">
                        Additional cash collection charges of â‚¹ <%= cashCollectionCharge %> is applicable on this order.
                    </p>
                    <button class="pay-button text-white" id="pay-btn">PAY â‚¹<%= total.toFixed(2) %></button>
                </div>

                <div class="divider">OR</div>

                <div class="save-offer">
                    Pay via UPI or Card and save handling charges
                    <div style="color: var(--gray-700); font-weight: 600; margin-top: 0.5rem;">
                        Pay now and save â‚¹ <%= cashCollectionCharge %>
                    </div>
                </div>
            </div>
        </div>

        <div class="summary-section">
            <div class="order-summary">
                <div class="delivery-header">
                    <span>Delivering order to <%= customerName %></span>
                    <span class="delivery-tag"><%= deliveryType %></span>
                </div>

                <div class="items-section">
                    <h4 style="margin-bottom: 1rem;">Items (<%= itemCount %>)</h4>
                    <% items.forEach(item => { %>
                        <div class="price-row">
                            <span><%= item.name %> (Qty: <%= item.quantity %>)</span>
                            <span>â‚¹<%= item.price.toFixed(2) %></span>
                         </div>
                    <% }); %>
                </div>
                

                <h5 style="margin: 1.5rem 0 1rem;">PRICE SUMMARY</h5>
                <div class="price-row">
                    <span>Total MRP (Incl. of taxes)</span>
                    <span>â‚¹<%= totalMRP.toFixed(2) %></span>
                </div>
                <div class="price-row">
                    <span>Bag Discount</span>
                    <span class="price-discount">-â‚¹<%= bagDiscount.toFixed(2) %></span>
                </div>
                <div class="price-row">
                    <span>Delivery Fee</span>
                    <span class="price-discount"><%=delivery%></span>
                </div>
                <div class="price-row price-total">
                    <span>Subtotal</span>
                    <span> â‚¹<%= total.toFixed(2) %> </span> 
                </div>

                <div class="trust-badges">
                    <div class="trust-badge">
                        âœ“<br>100% SECURE
                    </div>
                    <div class="trust-badge">
                        â†º<br>EASY RETURNS & REFUNDS
                    </div>
                    <div class="trust-badge">
                        â˜…<br>100% GENUINE
                    </div>
                </div>
            </div>
        </div>
    </div>
    </body>


<script>

document.addEventListener("DOMContentLoaded", function () {
    const payButton = document.getElementById("pay-btn");

    if (!payButton) {
        console.error("Button with ID 'pay-btn' not found!");
        return;
    }

    payButton.addEventListener("click", async function () {
        const selectedOption = document.querySelector('input[name="payment"]:checked');
        if (!selectedOption) {
            Swal.fire("Error", "Please select a payment method", "error");
            return;
        }
        const paymentMethod = selectedOption.value;
        const selectedAddressId = "<%= selectedAddressId %>" || "";
        const totalAmount = "<%= total %>" || 0;
        const razorpayKey = "<%= process.env.RAZORPAY_KEY_ID %>" || "";

        if (!selectedAddressId || !totalAmount) {
            console.error("Missing required values: Address ID or total amount.");
            return;
        }

        if (paymentMethod === "upi") {
            try {
                const response = await fetch("/create-order", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ amount: totalAmount, currency: "INR" }),
                });

                const data = await response.json();
                if (!data.success) throw new Error("Failed to create order");

                if (typeof Razorpay === "undefined") {
                    Swal.fire("Error", "Razorpay is not loaded!", "error");
                    return;
                }

                const options = {
                    key: razorpayKey,
                    amount: data.order.amount,
                    currency: data.order.currency,
                    order_id: data.order.id,
                    name: "My Store",
                    description: "Test Transaction",
                    handler: async function (response) {
                        Swal.fire({
                            title: "Payment Successful!",
                            text: "Payment ID: " + response.razorpay_payment_id,
                            icon: "success",
                            confirmButtonColor: "#28a745",
                            confirmButtonText: "OK",
                        }).then(async () => {
                            const orderResponse = await fetch('/place-order', {
                                method: 'POST',
                                headers: { 'Content-type': 'application/json' },
                                body: JSON.stringify({ paymentMethod, addressId: selectedAddressId })
                            });

                            const result = await orderResponse.json();

                            if (result.success) {
                                window.location.href = '/order-confirmation';
                            } else {
                                Swal.fire("Error while saving the order!", result.message || 'Error happened!', "error");
                            }
                        });
                    },
                    prefill: { email: "test@example.com", contact: "9999999999" },
                    theme: { color: "#3399cc" },
                    modal: {
                        ondismiss: function () {
                            const amountInRupees = options.amount / 100;
                            window.location.href = `/payment-failure?orderId=${data.order.id}&amount=${amountInRupees}&paymentMethod=RAZORPAY&addressId=${selectedAddressId}`;
                        }
                    }
                };

                const rzp = new Razorpay(options);
                rzp.open();
            } catch (error) {
                Swal.fire("Payment Failed!", error.message, "error").then(() => {
                    console.error('Error:', error);
                });
            }
        } else {
            Swal.fire("Cash on Delivery Selected!", "Your order will be placed with COD.", "info")
                .then(async () => {
                    const response = await fetch('/orderPlaced', {
                        method: 'POST',
                        headers: { 'Content-type': 'application/json' },
                        body: JSON.stringify({ paymentMethod, addressId: selectedAddressId })
                    });

                    const result = await response.json();

                    if (result.success) {
                        window.location.href = '/orderConformed';
                    } else {
                        Swal.fire("Error while saving the order!", result.message || 'Error happened!', "error");
                    }
                });
        }
    });
});

</script>
<%- include("../../views/partials/user/footer") %>